name: Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.23', '1.24']
        os: ['linux', 'darwin', 'windows']
        arch: ['386', 'amd64', 'arm', 'arm64']
        include:
          - go: '1.24'
            release: true
        exclude:
          - os: 'darwin'
            arch: 'arm'
          - os: 'darwin'
            arch: '386'
    steps:

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v .
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}

    - name: Upload to Release
      if: github.event.release.id && matrix.release
      run: |
        SUFFIX=""
        if [ "${{matrix.os}}" = "windows" ] ; then SUFFIX=.exe ; fi
        curl -f -sSL -X POST \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN}}" \
        -H "Content-Type: application/octet-stream" \
        --upload-file nCAT$SUFFIX \
        "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{github.event.release.id}}/assets?name=nCAT-${{matrix.os}}-${{matrix.arch}}$SUFFIX"
